// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Season {
  id                String             @id @default(cuid())
  name              String
  startDate         DateTime
  endDate           DateTime
  board             Board[]
  events            Event[]
  posts             Post[]
  seasonMemberships SeasonMembership[]
}

model SeasonMembership {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  season   Season @relation(fields: [seasonId], references: [id])
  seasonId String

  isBoardMember Boolean   @default(false)
  joinedAt      DateTime  @default(now())
  role          Role      @default(MEMBER)
  exitedAt      DateTime?
  exitReason    String?

  @@unique([userId, seasonId])
  @@index(seasonId)
}

model User {
  id String @id @default(uuid())

  name       String
  nationalId String?

  status UserStatus @default(ACTIVE)

  email         String  @unique
  personalEmail String
  password      String
  phone         String
  university    String?
  faculty       String?
  ieeeId        String?
  // for forms

  formSubmissions CustomFormSubmission[]

  // for Admins
  internalRole   InternalRole? @relation(fields: [internalRoleId], references: [id])
  internalRoleId String?

  committee   Committee? @relation("committeeMember", fields: [committeeId], references: [id])
  committeeId String?

  // headOf Committee[] @relation("committeeHead")
  seasonMemberships SeasonMembership[]

  // memberProfile MemberProfile?

  eventsAttendance         EventAttendance[]
  eventsSesssionAttendance EventSessionAttendance[]
  attendances              Attendance[]
  EventRegistration        EventRegistration[]

  foodOrders FoodOrder[]

  boards Board[]

  posts Post[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model InternalRole {
  id   String @id @default(cuid())
  name String @unique

  users       User[]
  permissions InternalRolePermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  group       String

  roles InternalRolePermission[]

  @@unique([name, group])
}

model InternalRolePermission {
  id           String       @id @default(cuid())
  roleId       String
  permissionId String
  role         InternalRole @relation(fields: [roleId], references: [id])
  permission   Permission   @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Board {
  id          String   @id @default(cuid())
  title       String
  name        String // for easy access instead of including all the user data
  created     DateTime @default(now())
  updated     DateTime @default(now())
  socialLinks Json
  image       String
  position    FameRank

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  committee   Committee? @relation(fields: [committeeId], references: [id])
  committeeId String?

  season   Season @relation(fields: [seasonId], references: [id])
  seasonId String

  @@index(seasonId)
}

enum FameRank {
  counselor
  excom
  head
  vice
}

// model MemberProfile {
//   id         String   @id @default(uuid())
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String   @unique

//   joinedAt   DateTime @default(now())
// }

model Committee {
  id          String  @id @default(uuid())
  name        String
  description String?
  leaders     Board[]
  topics      Json?
  image       String?

  sessions Session[]

  members User[] @relation("committeeMember")
  files   File[]
}

model Session {
  id   String @id @default(uuid())
  name String

  hoursTaken Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  startedAt DateTime? @default(now())

  description String?
  images      String[]

  committee   Committee @relation(fields: [committeeId], references: [id])
  committeeId String

  attendances Attendance[]
}

model Attendance {
  id        String  @id @default(uuid())
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  status AttendanceStatus @default(ABSENT)

  attendedAt DateTime?
}

enum AttendanceStatus {
  ABSENT
  PRESENT
  LATE
}

model Event {
  id                String   @id @default(uuid())
  name              String
  description       String?
  startDate         DateTime
  endDate           DateTime
  registrationStart DateTime
  registrationEnd   DateTime
  private           Boolean  @default(false)

  season   Season @relation(fields: [seasonId], references: [id])
  seasonId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  category EventCategory

  location String?

  registrations EventRegistration[]

  forms CustomForm[]

  registrationForm   CustomForm? @relation("RegistrationForm", fields: [registrationFormId], references: [id])
  registrationFormId String?     @unique

  coverImage String
  gallery    EventMedia[]
  // videos String[]

  speakers EventSpeaker[]
  sponsors EventSponsor[]
  partners EventPartner[]

  eventDays EventDay[]

  attenandances EventAttendance[]

  foodMenus  FoodMenu[]
  foodOrders FoodOrder[]
}

model EventMedia {
  id    String @id @default(uuid())
  event Event  @relation(fields: [eventId], references: [id])

  caption String?
  type    MediaType
  eventId String
  url     String
}

enum MediaType {
  GIF
  IMAGE
  VIDEO
}

model EventSpeaker {
  id        String       @id @default(uuid())
  event     Event        @relation(fields: [eventId], references: [id])
  eventId   String
  speaker   Speaker      @relation(fields: [speakerId], references: [id])
  speakerId String
  photo     SpeakerPhoto @relation(fields: [photoId], references: [id])
  photoId   String

  @@unique([eventId, speakerId])
}

model Sponsor {
  id              String         @id @default(uuid())
  name            String
  isSeasonSponsor Boolean        @default(false)
  isSeasonPartner Boolean        @default(false)
  images          SponsorPhoto[]

  eventsSponsored EventSponsor[]
  eventsPartnered EventPartner[]
}

model SponsorPhoto {
  id        String  @id @default(uuid())
  sponsor   Sponsor @relation(fields: [sponsorId], references: [id])
  sponsorId String
  url       String

  usedInSponsorship EventSponsor[] @relation("SponsorPhoto_EventSponsor")
  usedInPartnership EventPartner[] @relation("SponsorPhoto_EventPartner")
}

model EventSponsor {
  id      String @id @default(uuid())
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  sponsor   Sponsor @relation(fields: [sponsorId], references: [id])
  sponsorId String

  photo   SponsorPhoto @relation("SponsorPhoto_EventSponsor", fields: [photoId], references: [id])
  photoId String

  @@unique([eventId, sponsorId])
}

model EventPartner {
  id      String @id @default(uuid())
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  sponsor   Sponsor @relation(fields: [sponsorId], references: [id])
  sponsorId String

  photo   SponsorPhoto @relation("SponsorPhoto_EventPartner", fields: [photoId], references: [id])
  photoId String

  @@unique([eventId, sponsorId])
}

model EventDay {
  id      String   @id @default(uuid())
  date    DateTime
  label   String?
  event   Event    @relation(fields: [eventId], references: [id])
  eventId String

  agendaItems AgendaItem[]
}

model FoodMenu {
  id         String      @id @default(uuid())
  coverImage String
  name       String
  event      Event       @relation(fields: [eventId], references: [id])
  eventId    String
  menuImages String[]
  // day        EventDay? @relation(fields: [eventDayId], references: [id])
  // eventDayId String?   @unique
  orders     FoodOrder[]

  @@unique([id, eventId])
}

// model FoodItem {
//   id          String  @id @default(uuid())
//   name        String
//   description String?
//   price       Float
//   available   Boolean @default(true)

//   menu   FoodMenu @relation(fields: [menuId], references: [id])
//   menuId String

//   orders FoodOrderItem[]
// }

model FoodOrder {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  menu   FoodMenu @relation(fields: [menuId], references: [id])
  menuId String

  items   String //used this way because it will be hard to add all the menu items one by one 
  comment String?
  price   String?

  status OrderStatus @default(pending)

  createdAt DateTime @default(now())

  // items FoodOrderItem[]
}

enum OrderStatus {
  pending
  rejected
  accepted
}

// model FoodOrderItem {
//   id      String    @id @default(uuid())
//   order   FoodOrder @relation(fields: [orderId], references: [id])
//   orderId String

//   foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
//   foodItemId String

//   quantity Int @default(1)
// }

model AgendaItem {
  id          String    @id @default(uuid())
  name        String
  description String?
  startTime   DateTime
  endTime     DateTime?

  eventDay   EventDay @relation(fields: [eventDayId], references: [id], onDelete: Cascade)
  eventDayId String

  speaker   Speaker @relation(fields: [speakerId], references: [id])
  speakerId String

  attendances EventSessionAttendance[]
}

model EventAttendance {
  id      String @id @default(uuid())
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  // maxAttendees Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  checkedInAt DateTime @default(now())
}

model EventSessionAttendance {
  id           String     @id @default(uuid())
  agendaItem   AgendaItem @relation(fields: [agendaItemId], references: [id])
  agendaItemId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  attendedAt DateTime @default(now())
}

model EventRegistration {
  id      String @id @default(uuid())
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  status RegistrationStatus @default(pending)
  qrcode String?

  submittedAt DateTime @default(now())

  submission   CustomFormSubmission? @relation("EventSubmission", fields: [submissionId], references: [id])
  submissionId String?               @unique

  @@unique([eventId, userId])
  @@index([eventId, userId, status])
}

enum RegistrationStatus {
  pending
  accepted
  rejected
}

model CustomForm {
  id                 String   @id @default(uuid())
  name               String
  description        String?
  type               FormType @default(ANY) // optional, like "event", "survey", "feedback"
  isRegistrationForm Boolean  @default(false) //to check if this the registartion form for the event
  isPublic           Boolean  @default(true)
  isPublished        Boolean  @default(true)

  startDate DateTime  @default(now())
  endDate   DateTime? //TODO: make it required later

  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?

  registrationFor Event? @relation("RegistrationForm")

  responses CustomFormSubmission[]

  fields CustomFormField[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index(eventId)
  @@index([eventId, isRegistrationForm])
}

enum FormType {
  EVENT
  SURVEY
  FEEDBACK
  POST
  ANY
}

model CustomFormField {
  id          String        @id @default(uuid())
  label       String
  name        String
  type        FormFieldType
  placeholder String?
  required    Boolean       @default(false)
  min         Int?
  max         Int?
  pattern     String? //for custom validations (regex) for text and email
  options     String[]

  form      CustomForm?          @relation(fields: [formId], references: [id])
  formId    String?
  responses CustomFormResponse[]
}

model CustomFormSubmission {
  id     String     @id @default(uuid())
  form   CustomForm @relation(fields: [formId], references: [id])
  formId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  submittedAt DateTime             @default(now())
  responses   CustomFormResponse[]

  registration EventRegistration? @relation("EventSubmission")
}

model CustomFormResponse {
  id      String          @id @default(uuid())
  value   String
  field   CustomFormField @relation(fields: [fieldId], references: [id])
  fieldId String

  submission   CustomFormSubmission @relation(fields: [submissionId], references: [id])
  submissionId String
}

model Speaker {
  id          String         @id @default(uuid())
  name        String         @unique
  title       String
  job         String?
  company     String?
  socialLinks Json
  bio         String?
  images      SpeakerPhoto[]

  eventsUsedIn EventSpeaker[]

  agenda AgendaItem[]

  @@index([name])
}

model SpeakerPhoto {
  id        String  @id @default(uuid())
  speaker   Speaker @relation(fields: [speakerId], references: [id])
  speakerId String

  photoUsedIn EventSpeaker[]

  url     String
  caption String?
}

model Post {
  id       String @id @default(uuid())
  title    String @unique
  content  String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  season   Season @relation(fields: [seasonId], references: [id])
  seasonId String

  private Boolean @default(false)

  images String[]
  videos String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(title)
}

model Awards {
  id          String   @id @default(uuid())
  title       String
  winningDate DateTime
  image       String
  place       String
  description String
}

model FAQs {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Insight {
  id        String   @id @default(uuid())
  icon      String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id           String   @id @default(uuid())
  name         String
  size         Int
  uploadedDate DateTime @default(now())
  path         String
  mimeType     String?

  committee   Committee @relation(fields: [committeeId], references: [id])
  committeeId String

  entityType String
  entityId   String

  @@index([entityType, entityId])
}

enum EventCategory {
  event
  bootcamp
  workshop
  outing
}

enum Role {
  ATTENDEE
  MEMBER
  HEAD
  EXCOM
}

enum FormFieldType {
  TEXT
  EMAIL
  NUMBER
  SELECT
  DROPDOWN
  OPTIONS
  FILE
  DATE
  PARAGRAPH
}

enum UserStatus {
  ACTIVE
  INACTIVE
}
